import Base.Functor (..)

operator (<*<) =
  { fixity = Left
    precedence = 4
    opname = "leftwards splat"
  }

operator (>*>) =
  { fixity = Right
    precedence = 4
    opname = "rightwards splat"
  }

operator (-*>) =
  { fixity = Right
    precedence = 4
    opname = "discard splat rightwards"
  }

operator (>*-) =
  { fixity = Right
    precedence = 4
    opname = "rightwards splat discard"
  }

module Applicative where

mod type Apply f where
  -- Syntactic sugar for
  -- has .. : Functor f
  has Functor f

  -- | Right to left sequential application.
  (<*<) : f (a -> b) -> f a -> f b
  (<*<) = liftA2 identity

  -- Q: Does this introduce an additional
  -- liftA2 : (M : Apply f) => ... in the outer scope?
  liftA2 : (a -> b -> c) -> f a -> f b -> f c
  liftA2 g x y = g <|< x <*< y

implicit type Applicative f where
  has Apply f

  -- | Lift a value.
  pure : a -> f a

-- | Left to right sequential application.
let (>*>) : (M : Apply f) => f a -> f (a -> b) -> f b
let (>*>) = flip M.(<*<)

-- | Perform actions from left to right, discarding the left argument.
let (-*>) : (M : Apply f) => f a -> f b -> f b
let (-*>) = M.liftA2 (flip const)

-- | Perform actions from left to right, discarding the right argument.
let (>*-) : (M : Apply f) => f a -> f b -> f a
let (>*-) = M.liftA2 const
