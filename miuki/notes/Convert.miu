-- | Canonical conversions.
-- |
-- | For some types, there is a conversion that "just makes sense". For example,
-- |
-- | * Converting an integer of lower precision to one of higher precision.
-- | * Converting an :miu:type:`Integer` to a :miu:type:`Rational`.
-- | * Converting a :miu:type:`String` to a :miu:type:`ByteString`.
-- |
-- | In these cases, it makes sense to have a ``From`` module to convert values
-- | of one type to another.
-- |
-- | Laws
-- | ----
-- | Modules with this type should satisfy the following criteria:
-- |
-- | * ``from`` should be 1-to-1 (injective). In other words, if both the
-- |   domain and codomain have equality relations, then
-- |   ``from x == from y ==> x == y``.
-- | * ``from`` should be structure-preserving, if possible [1]_. For example,
-- |   suppose that we have ``u : A``, ``v : A`` and an operation ``@`` such
-- |   that both ``u @ v`` and ``(from u) @ (from v)`` are well-defined. Then,
-- |   we should have ``from (u @ v) == (from u) @ (from v)``.
-- |
-- | Hence, ``from`` is an `embedding <https://en.wikipedia.org/wiki/Embedding>`_.
-- |
-- | Furthermore, the module should be universal in the following sense:
-- | if there exist modules ``From C A`` and ``From C B`` then
-- | ``From A B`` should make the corresponding diagram commute. Similarly,
-- | if there exist modules ``From A D`` and ``From D B`` then the corresponding
-- | diagram should commute.
-- |
-- |               ******************************************
-- |               *                                        *
-- |               *           from            from         *
-- |               *   y : C --------> w : A ---------+     *
-- |               *     |               |            |     *
-- |               *     |          from |            v     *
-- |               *     |               |          z : D   *
-- |               *     |    from       v     from   |     *
-- |               *     +-----------> x : B <--------+     *
-- |               *                                        *
-- |               ******************************************
-- |
-- | .. [1]
-- |
-- |   This may not be always possible. For example, consider wrapping arithmetic
-- |   operations on finite-precision integers, and ``from`` being up-casting.
-- |   In such a case, we take the pragmatic choice and allow it because if we
-- |   used panic-on-overflow operations, ``from`` is structure-preserving
-- |   according to our definition.
-- |
-- | Guidelines
-- | ----------
-- | #. Typically, you would not want to write this module in isolation, but
-- |    inside :miu:modtype:`Convert` or :miu:modtype:`BiConvert`.
-- | #. Typically, ``from`` will be the
-- |    `inclusion map <https://en.wikipedia.org/wiki/Inclusion_map>`_. If that
-- |    isn't the case, consider keeping the module explicit.
mod type From inp out where
  -- | A conversion that doesn't fail.
  let from : inp -> out

let from : {M : From inp out} -> inp -> out
let from = M.from

-- | Identical to :miu:fn:`from` but works cleanly with type applications.
-- |
-- | >>> from @_ @Int64 (6 : Int32)
-- | 6
-- | >>> into @Int64 (6 : Int32)
-- | 6
let into : o == out => {M : From inp out} -> inp -> out
let into = M.from

-- | Canonical conversions with partial inverses.
-- |
-- | When you're performing conversions, it is often the case that conversions
-- | in one direction will always succeed whereas those in the opposite
-- | direction may fail. For example,
-- |
-- | * All :miu:type:`Natural`s can be converted to :miu:type:`Integer`s but not
-- |   vice-versa.
-- | * All :miu:type:`String`s can be converted to :miu:type:`ByteString`s but
-- |   not vice-versa.
-- |
-- | In such a situation, it makes sense to expose a pair of conversions, a
-- | forward conversion which always succeeds, and a backward conversion which
-- | may fail by returning :miu:`Nothing`.
-- |
-- | Laws
-- | ----
-- | If ``y = Forward.from (x : A)``, and we have equality defined on `A`,
-- | then ``Backward.from y == Just x``.
-- |
-- | Guidelines
-- | ----------
-- | Use :miu:modtype:`BiConvert` instead if the backward conversion cannot
-- | fail.
mod type Convert a b where
  -- TODO: Is it possible to expose implementation of a type in a module
  -- signature like associated types in Rust? Otherwise, we won't be able
  -- to have a custom error type here (at least, not ergonomically)...
  has Forward : From a b
  has Backward : From b (Maybe a)

-- | Canonical conversions with inverses.
-- |
-- | In some situations, you may encounter types which are essentially the same
-- | but you may want to work with different representations. For example, if we
-- | use ``m`` and ``km`` to represent metres and kilometres respectively,
-- | we are free to convert ``1000.0 : [m]`` to ``1.0 : [km]`` and vice-versa
-- | without any possibility of failure [#]_[#]_.
-- |
-- | .. [#] See :ref:`Units of Measure` if you're confused about the notation.
-- | .. [#] We're ignoring issues due to loss of precision\/underflow\/overflow
-- |        here for simplicity.
-- |
-- | Laws
-- | ----
-- | ``Forward.from`` and ``Backward.from`` are inverses.
-- |
-- | Guidelines
-- | ----------
-- | If the conversion isn't "obvious", consider keeping the module explicit.
-- | For example, if you have ``type User = Admin | Ordinary`` then having an
-- | implicit of type ``BiConvert User Bool`` may not be a good idea.
-- | On the other hand, if you have ``type FileExists = Exists | Missing``,
-- | then having an implicit of type ``BiConvert FileExists Bool`` is okay.
mod type BiConvert a b where
  has Forward : From a b
  has Backward : From b a
